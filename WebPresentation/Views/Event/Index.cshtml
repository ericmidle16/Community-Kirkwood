<!--
///<summary>
/// Creator: Jackson Manternch
/// Created: 2025/04/25 
/// Summary: The view for the events

/// Last Updated By: Skyann
/// Last Updated: 2025-04-27
/// What Was Changed: Styling added.
/// </summary>
-->
@model IEnumerable<DataDomain.Event>

@{
    ViewData["Title"] = "Events";
}

<h1 class="text-center"> All Events</h1>
@*
    Creator: Dat Tran
    Created: 2025-04-25
    Summary: Sweet Alerts for Need List CRUD functionality.
    Last updated by:
    Last updated: 
    Changes: 
*@
@if (TempData["SuccessMessage"] != null)
{
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            if (!sessionStorage.getItem('sweetAlertUpdateEventShown')) {
                Swal.fire({
                    icon: 'success',
                    title: 'Done',
                    text: '@TempData["SuccessMessage"]'
                });
                sessionStorage.setItem('sweetAlertUpdateEventShown', 'true');
            }
        });
    </script>
    @* Remove the message so it doesn’t persist on refresh *@
    TempData.Remove("SuccessMessage");
}
else
{
    <script>
        // Ensure the flag is reset if there's no success message
        sessionStorage.removeItem('sweetAlertUpdateEventShown');
    </script>
}
@if (TempData["DeleteSuccess"] != null)
{
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            if (!sessionStorage.getItem('sweetAlertDeleteEventShown')) {
                Swal.fire({
                    icon: 'success',
                    title: 'Deleted',
                    text: '@TempData["DeleteSuccess"]'
                });
                sessionStorage.setItem('sweetAlertDeleteEventShown', 'true');
            }
        });
    </script>
    @* Remove the message so it doesn’t persist on refresh *@
    TempData.Remove("DeleteSuccess");
}
else
{
    <script>
        // Ensure the flag is reset if there's no success message
        sessionStorage.removeItem('sweetAlertDeleteEventShown');
    </script>
}
@*Hides the button if ProjectID is 0, which is present in the Event list if not accessed through a project. *@
<p>
    @if (ViewBag.ProjectID == 0)
    {
        <a asp-action="Create" asp-route-projectID="@ViewBag.ProjectID" hidden>Create New</a>
    }
    else
    {
        <a asp-action="Create" asp-route-projectID="@ViewBag.ProjectID" class="btn btn-success btn">Create New Event</a>
    }
</p>

<table class="table table-striped table-bordered table-hover">
    <thead class="thead-dark">
        <tr>
            @* <th> *@
            @*     @Html.DisplayNameFor(model => model.EventID) *@
            @* </th> *@
            <th class="header">
                Event Type
            </th>
            @* <th> *@
            @*     @Html.DisplayNameFor(model => model.ProjectID) *@
            @* </th> *@
            <th class="header">
                Date Created
            </th>
            <th class="header">
               Start Date
            </th>
            <th class="header">
                End Date
            </th>
            <th class="header">
                @Html.DisplayNameFor(model => model.Name)
            </th>
            @* <th> *@
            @*     @Html.DisplayNameFor(model => model.LocationID) *@
            @* </th> *@
            <th class="header">
                Volunteers Needed
            </th>
            @* <th> *@
            @*     @Html.DisplayNameFor(model => model.UserID) *@
            @* </th> *@
            <th class="header">
                @Html.DisplayNameFor(model => model.Notes)
            </th>
            <th class="header">
                @Html.DisplayNameFor(model => model.Description)
            </th>
            @* <th> *@
            @*     @Html.DisplayNameFor(model => model.Active) *@
            @* </th> *@
            <th class="header"></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            @* <td> *@
            @*     @Html.DisplayFor(modelItem => item.EventID) *@
            @* </td> *@
            <td>
                @Html.DisplayFor(modelItem => item.EventTypeID)
            </td>
            @* <td> *@
            @*     @Html.DisplayFor(modelItem => item.ProjectID) *@
            @* </td> *@
            <td>
                @Html.DisplayFor(modelItem => item.DateCreated)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.StartDate)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.EndDate)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Name)
            </td>
            @* <td> *@
            @*     @Html.DisplayFor(modelItem => item.LocationID) *@
            @* </td> *@
            <td>
                @Html.DisplayFor(modelItem => item.VolunteersNeeded)
            </td>
            @* <td> *@
            @*     @Html.DisplayFor(modelItem => item.UserID) *@
            @* </td> *@
            <td>
                @Html.DisplayFor(modelItem => item.Notes)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Description)
            </td>
            @* <td> *@
            @*     @Html.DisplayFor(modelItem => item.Active) *@
            @* </td> *@
            <td>
                <div class="d-flex flex-wrap justify-content-center gap-2">
                        <a href="@Url.Action("Edit", new { id = item.EventID })" class="btn btn-warning btn-sm">Edit</a> 
                        <a href="@Url.Action("Details", new { id = item.EventID })" class="btn btn-primary btn-sm">Details</a> 
                        <a href="@Url.Action("Delete", new { id = item.EventID })" class="btn btn-danger btn-sm">Delete</a>
                </div>
            </td>
        </tr>
}
    </tbody>
</table>

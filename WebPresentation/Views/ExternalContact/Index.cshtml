@* <summary> *@
@*     Creator: Stan Anderson *@
@*     Created: 2025-03-28 *@
@*     Summary: View for the External Contact.
*@
@*     Last Updated By:Skyann Heintz *@
@*     Last Updated: 2025-04-04 *@
@*     What Was Changed: Added styling to the document, adjusted the edit,delete and the details buttons 
            to work as buttons but still work. Changed "Create New" to Add New Contact.
. *@
@*
       Last Updated By: Dat Tran
       Last Updated: 2025-04-27
       What was changed: Added Sweet Alerts for Create, Update and Delete for External Contact. 
       As well as creating an External Contact Type.


*@
@* </summary> *@

@model IEnumerable<DataDomain.ExternalContact>

@{
    ViewData["Title"] = "External Contacts";
}

<h1 class="text-center">External Contacts</h1>
@if (TempData["AddSuccess"] != null)
{
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            if (!sessionStorage.getItem('sweetAlertAddContactShown')) {
                Swal.fire({
                    icon: 'success',
                    title: 'Done',
                    text: '@TempData["AddSuccess"]'
                });
                sessionStorage.setItem('sweetAlertAddContactShown', 'true');
            }
        });
    </script>
    @* Remove the message so it doesn’t persist on refresh *@
    TempData.Remove("AddSuccess");
}
else
{
    <script>
        // Ensure the flag is reset if there's no success message
        sessionStorage.removeItem('sweetAlertAddContactShown');
    </script>
}
@if (TempData["UpdateSuccess"] != null)
{
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            if (!sessionStorage.getItem('sweetAlertUpdateContactShown')) {
                Swal.fire({
                    icon: 'success',
                    title: 'Done',
                    text: '@TempData["UpdateSuccess"]'
                });
                sessionStorage.setItem('sweetAlertUpdateContactShown', 'true');
            }
        });
    </script>
    @* Remove the message so it doesn’t persist on refresh *@
    TempData.Remove("UpdateSuccess");
}
else
{
    <script>
        // Ensure the flag is reset if there's no success message
        sessionStorage.removeItem('sweetAlertUpdateContactShown');
    </script>
}
@if (TempData["DeleteSuccess"] != null)
{
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            if (!sessionStorage.getItem('sweetAlertDeleteContactShown')) {
                Swal.fire({
                    icon: 'success',
                    title: 'Done',
                    text: '@TempData["DeleteSuccess"]'
                });
                sessionStorage.setItem('sweetAlertDeleteContactShown', 'true');
            }
        });
    </script>
    @* Remove the message so it doesn’t persist on refresh *@
    TempData.Remove("DeleteSuccess");
}
else
{
    <script>
        // Ensure the flag is reset if there's no success message
        sessionStorage.removeItem('sweetAlertDeleteContactShown');
    </script>
}
@if (TempData["AddTypeSuccess"] != null)
{
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            if (!sessionStorage.getItem('sweetAlertAddTypeShown')) {
                Swal.fire({
                    icon: 'success',
                    title: 'Done',
                    text: '@TempData["AddTypeSuccess"]'
                });
                sessionStorage.setItem('sweetAlertAddTypeShown', 'true');
            }
        });
    </script>
    @* Remove the message so it doesn’t persist on refresh *@
    TempData.Remove("AddTypeSuccess");
}
else
{
    <script>
        // Ensure the flag is reset if there's no success message
        sessionStorage.removeItem('sweetAlertAddTypeShown');
    </script>
}
<p>
<p>
    <a asp-action="Create" class="btn btn-success">Create New Contact</a>
</p>
<table class="table table-striped table-bordered table-hover">
    <thead class="thead-dark">
        <tr>
            <th hidden>
                @Html.DisplayNameFor(model => model.ExternalContactID)
            </th>
            <th class="header">
                @Html.DisplayNameFor(model => model.ExternalContactTypeID)
            </th>
            <th class="header">
                @Html.DisplayNameFor(model => model.ContactName)
            </th>
            <th class="header">
                @Html.DisplayNameFor(model => model.GivenName)
            </th>
            <th class="header">
                @Html.DisplayNameFor(model => model.FamilyName)
            </th>
            <th class="header">
                @Html.DisplayNameFor(model => model.Email)
            </th>
            <th class="header">
                @Html.DisplayNameFor(model => model.PhoneNumber)
            </th>
            <th class="header">
                @Html.DisplayNameFor(model => model.JobTitle)
            </th>
            @* <th class="header"> *@
            @*     @Html.DisplayNameFor(model => model.Address) *@
            @* </th> *@
            @* <th class="header"> *@
            @*     @Html.DisplayNameFor(model => model.Description) *@
            @* </th> *@
            @* <th> *@
            @*     @Html.DisplayNameFor(model => model.AddedBy) *@
            @* </th> *@
            @* <th> *@
            @*     @Html.DisplayNameFor(model => model.LastUpdatedBy) *@
            @* </th> *@
            <th hidden>
                @Html.DisplayNameFor(model => model.Active)
            </th>
            <th class="header"></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td hidden>
                @Html.DisplayFor(modelItem => item.ExternalContactID)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ExternalContactTypeID)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ContactName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.GivenName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.FamilyName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Email)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.PhoneNumber)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.JobTitle)
            </td>
            @* <td> *@
            @*     @Html.DisplayFor(modelItem => item.Address) *@
            @* </td> *@
            @* <td> *@
            @*     @Html.DisplayFor(modelItem => item.Description) *@
            @* </td> *@
            @* <td> *@
            @*     @Html.DisplayFor(modelItem => item.AddedBy) *@
            @* </td> *@
            @* <td> *@
            @*     @Html.DisplayFor(modelItem => item.LastUpdatedBy) *@
            @* </td> *@
            <td hidden>
                @Html.DisplayFor(modelItem => item.Active)
            </td>
            <td class="text-center">
                 <div class="d-flex justify-content-center gap-2 mb-2">
                    <a href="@Url.Action("Edit", new { id = item.ExternalContactID })" class="btn btn-warning btn-sm ">Edit</a>
                    <a href="@Url.Action("Delete", new { id = item.ExternalContactID })" class="btn btn-danger btn-sm">Deactivate</a>
                </div>

                <div class="d-flex justify-content-center gap-2 mb-2">
                    <a href="@Url.Action("Details", new { id = item.ExternalContactID })" class="btn btn-primary btn-sm ">Details</a>
                </div>
                   
         
            @*     @Html.ActionLink("Edit", "Edit", new { id = item.ExternalContactID }) | *@
            @*     @Html.ActionLink("Details", "Details", new { id = item.ExternalContactID }) | *@
            @*     @Html.ActionLink("Delete", "Delete", new { id = item.ExternalContactID }) *@
            @* </td> *@
        </tr>
}
    </tbody>
</table>
